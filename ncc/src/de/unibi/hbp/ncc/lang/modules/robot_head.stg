define_robot_head_builder() ::= <<
def build_head_direction_net(num_dirs, max_shift, num_neurons, neuron_kind, neuron_params, weight_inh, weight_exc, syn_delay):
    output_pop_list = []
    # Create Populations + self connection
    for pop_id in range(0, num_dirs):
        pop = sim.Population(num_neurons, neuron_kind, neuron_params, label="dir_" + str(pop_id + 1))
        sim.Projection(pop, pop, sim.AllToAllConnector(), sim.StaticSynapse(weight=weight_exc, delay=syn_delay))
        output_pop_list.append(pop)

    # Forward excitation
    for pop_id in range(0, num_pops-1):
        sim.Projection(population_list[pop_id], population_list[pop_id + 1], sim.AllToAllConnector(),
                    sim.StaticSynapse(weight=weight_exc, delay=syn_delay))
    sim.Projection(population_list[num_pops - 1] , population_list[0], sim.AllToAllConnector(),
                    sim.StaticSynapse(weight=weight_exc, delay=syn_delay))

    # Backward inhibition
    for pop_id in range(1, num_pops):
        sim.Projection(population_list[pop_id], population_list[pop_id - 1], sim.AllToAllConnector(),
                    sim.StaticSynapse(weight=weight_inh, delay=syn_delay), receptor_type="inhibitory")
    sim.Projection(population_list[0] , population_list[num_pops - 1], sim.AllToAllConnector(),
                    sim.StaticSynapse(weight=weight_inh, delay=syn_delay), receptor_type="inhibitory")

    input_pop_list = []

    return { 'in': input_pop_list, 'out': output_pop_list }  # return list of input ports and output ports
>>

build_robot_head_instance(head_direction) ::= <<
define_robot_head_builder(<head_direction.numberOfDirections>, <head_direction.maxShiftVelocity>, <\\>
<head_direction.numberOfNeuronsPerPopulation>, <\\>
<ref_neuronType(chain.neuronType)>, <\\>
<head_direction.inhibitionWeight>, <head_direction.excitationWeight>, <head_direction.synapseDelay>)
>>
